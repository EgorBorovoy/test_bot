// ==============================================
// RISK_MANAGEMENT.JS - –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò –ò –ú–ê–ù–ò-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢
// ==============================================

const logger = require('./logger');
const { CONFIG } = require('./config');

class RiskManager {
    constructor(whiteBitAPI) {
        this.api = whiteBitAPI;
        this.maxDailyLoss = CONFIG.TRADING.MAX_DAILY_LOSS || 10; // % –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        this.maxOpenPositions = CONFIG.TRADING.MAX_OPEN_POSITIONS || 5;
        this.dailyStats = {
            startBalance: 0,
            currentPnL: 0,
            tradesCount: 0,
            lastReset: new Date().toDateString()
        };
    }

    // –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    resetDailyStats() {
        const today = new Date().toDateString();
        if (this.dailyStats.lastReset !== today) {
            this.dailyStats = {
                startBalance: 0,
                currentPnL: 0,
                tradesCount: 0,
                lastReset: today
            };
            logger.info('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
        }
    }

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    async calculatePositionSize(symbol, price, activePositionsCount = 0) {
        try {
            logger.info('üí∞ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏', { symbol, price });
            
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            const balance = await this.api.getBalance();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (USDT –∏–ª–∏ DUSDT –¥–ª—è –¥–µ–º–æ)
            const baseBalance = await this.getBaseBalance(balance);
            
            if (baseBalance <= 0) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
            }

            // –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
            const riskAmount = (baseBalance * CONFIG.TRADING.RISK_PERCENT) / 100;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            let positionSize = Math.min(
                Math.max(riskAmount, CONFIG.TRADING.MIN_ORDER_SIZE),
                CONFIG.TRADING.MAX_ORDER_SIZE
            );

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            positionSize = await this.applyRiskLimits(positionSize, baseBalance, activePositionsCount);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
            const marketLimits = await this.api.getMarketLimits(symbol);
            if (positionSize < marketLimits.minTotal) {
                logger.warn('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞', {
                    calculated: positionSize,
                    required: marketLimits.minTotal
                });
                positionSize = marketLimits.minTotal;
            }

            logger.info('üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω', {
                baseBalance,
                riskPercent: CONFIG.TRADING.RISK_PERCENT,
                riskAmount,
                finalPositionSize: positionSize,
                marketLimits
            });

            return positionSize;
            
        } catch (error) {
            logger.errorWithStack('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏', error, { symbol, price });
            return CONFIG.TRADING.MIN_ORDER_SIZE;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (USDT/DUSDT)
    async getBaseBalance(balance) {
        let baseBalance = 0;
        let source = '';

        // –ò—â–µ–º USDT/DUSDT –±–∞–ª–∞–Ω—Å
        if (balance.USDT?.available) {
            baseBalance = parseFloat(balance.USDT.available);
            source = 'USDT';
        } else if (balance.main?.USDT?.available) {
            baseBalance = parseFloat(balance.main.USDT.available);
            source = 'main.USDT';
        } else if (balance.DUSDT?.available) {
            baseBalance = parseFloat(balance.DUSDT.available);
            source = 'DUSDT';
        } else if (balance.main?.DUSDT?.available) {
            baseBalance = parseFloat(balance.main.DUSDT.available);
            source = 'main.DUSDT';
        }

        logger.info('üíµ –ë–∞–∑–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞–π–¥–µ–Ω', { baseBalance, source });
        return baseBalance;
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    async applyRiskLimits(positionSize, baseBalance, activePositionsCount) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if (activePositionsCount >= this.maxOpenPositions) {
            throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${this.maxOpenPositions}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        this.resetDailyStats();
        
        if (this.dailyStats.startBalance === 0) {
            this.dailyStats.startBalance = baseBalance;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
        const currentLoss = ((this.dailyStats.startBalance - baseBalance) / this.dailyStats.startBalance) * 100;
        if (currentLoss >= this.maxDailyLoss) {
            throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: ${currentLoss.toFixed(2)}%`);
        }

        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –ø–æ—Ç–µ—Ä—è—Ö
        if (currentLoss > this.maxDailyLoss / 2) {
            positionSize *= 0.5; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤–¥–≤–æ–µ
            logger.warn('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É–º–µ–Ω—å—à–µ–Ω –∏–∑-–∑–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ—Ç–µ—Ä—å', { currentLoss, newSize: positionSize });
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
        const maxPerPosition = baseBalance * 0.1; // –ú–∞–∫—Å–∏–º—É–º 10% –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        if (positionSize > maxPerPosition) {
            positionSize = maxPerPosition;
            logger.warn('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞', { newSize: positionSize });
        }

        return positionSize;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
    async canOpenPosition(symbol, price, activePositions) {
        try {
            // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            const isMarketActive = await this.api.isMarketActive(symbol);
            if (!isMarketActive) {
                return { allowed: false, reason: '–†—ã–Ω–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            const activeCount = activePositions.size;
            if (activeCount >= this.maxOpenPositions) {
                return { 
                    allowed: false, 
                    reason: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: ${this.maxOpenPositions}` 
                };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            this.resetDailyStats();
            
            const balance = await this.api.getBalance();
            const baseBalance = await this.getBaseBalance(balance);
            
            if (this.dailyStats.startBalance === 0) {
                this.dailyStats.startBalance = baseBalance;
            }

            const currentLoss = ((this.dailyStats.startBalance - baseBalance) / this.dailyStats.startBalance) * 100;
            if (currentLoss >= this.maxDailyLoss) {
                return { 
                    allowed: false, 
                    reason: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ—Ç–µ—Ä—å: ${currentLoss.toFixed(2)}%` 
                };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            if (baseBalance < CONFIG.TRADING.MIN_ORDER_SIZE) {
                return { 
                    allowed: false, 
                    reason: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${baseBalance}` 
                };
            }

            return { allowed: true, reason: '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã' };
            
        } catch (error) {
            logger.errorWithStack('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏', error, { symbol });
            return { allowed: false, reason: `–û—à–∏–±–∫–∞: ${error.message}` };
        }
    }

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–Ω–∏ Take Profit
    calculateTPLevels(entryPrice, side = 'long') {
        const levels = [];
        const basePercentages = [2, 4, 6]; // 2%, 4%, 6% –ø—Ä–∏–±—ã–ª–∏
        
        basePercentages.forEach((percentage, index) => {
            const multiplier = side === 'long' ? (1 + percentage / 100) : (1 - percentage / 100);
            const price = entryPrice * multiplier;
            
            levels.push({
                level: index + 1,
                price: price,
                percentage: CONFIG.STRATEGY.TP_LEVELS[index]?.percentage || 25
            });
        });

        return levels;
    }

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å Stop Loss
    calculateStopLoss(entryPrice, side = 'long', slPercentage = 3) {
        const multiplier = side === 'long' ? (1 - slPercentage / 100) : (1 + slPercentage / 100);
        return entryPrice * multiplier;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateDailyStats(tradeResult) {
        this.resetDailyStats();
        
        this.dailyStats.tradesCount++;
        if (tradeResult.pnl) {
            this.dailyStats.currentPnL += tradeResult.pnl;
        }

        logger.info('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', this.dailyStats);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    getDailyStats() {
        this.resetDailyStats();
        return { ...this.dailyStats };
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
    shouldClosePosition(position, currentPrice) {
        const pnlPercent = ((currentPrice - position.entryPrice) / position.entryPrice) * 100;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss
        const stopLossPrice = this.calculateStopLoss(position.entryPrice, position.side);
        if ((position.side === 'long' && currentPrice <= stopLossPrice) ||
            (position.side === 'short' && currentPrice >= stopLossPrice)) {
            return { 
                shouldClose: true, 
                reason: 'Stop Loss triggered',
                type: 'STOP_LOSS',
                pnl: pnlPercent
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        const maxLossPercent = CONFIG.TRADING.MAX_LOSS_PER_POSITION || 5;
        if (pnlPercent <= -maxLossPercent) {
            return { 
                shouldClose: true, 
                reason: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: ${pnlPercent.toFixed(2)}%`,
                type: 'MAX_LOSS',
                pnl: pnlPercent
            };
        }

        return { shouldClose: false };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    async validateOrder(symbol, side, amount, price = null) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã —Ä—ã–Ω–∫–∞
            const limits = await this.api.getMarketLimits(symbol);
            
            const validationResult = {
                valid: true,
                errors: [],
                warnings: []
            };

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if (amount < limits.minAmount) {
                validationResult.valid = false;
                validationResult.errors.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: ${amount} < ${limits.minAmount}`);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã (–¥–ª—è –ø–æ–∫—É–ø–∫–∏)
            if (side === 'buy' && price) {
                const total = amount * price;
                if (total < limits.minTotal) {
                    validationResult.valid = false;
                    validationResult.errors.push(`–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π: ${total} < ${limits.minTotal}`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
            if (side === 'buy' && price) {
                const total = amount * price;
                if (total > limits.maxTotal) {
                    validationResult.valid = false;
                    validationResult.errors.push(`–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π: ${total} > ${limits.maxTotal}`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
            const amountDecimals = (amount.toString().split('.')[1] || '').length;
            if (amountDecimals > limits.stockPrec) {
                validationResult.warnings.push(`–¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞: ${amountDecimals} > ${limits.stockPrec}`);
            }

            if (price) {
                const priceDecimals = (price.toString().split('.')[1] || '').length;
                if (priceDecimals > limits.moneyPrec) {
                    validationResult.warnings.push(`–¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –ø—Ä–µ–≤—ã—à–µ–Ω–∞: ${priceDecimals} > ${limits.moneyPrec}`);
                }
            }

            logger.info('–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { symbol, side, amount, price, validationResult });
            return validationResult;
            
        } catch (error) {
            logger.errorWithStack('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞', error, { symbol, side, amount, price });
            return {
                valid: false,
                errors: [`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`],
                warnings: []
            };
        }
    }

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    calculatePartialCloseAmount(position, percentage) {
        const closeAmount = (position.quantity * percentage) / 100;
        
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        const precision = 8; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        return Math.floor(closeAmount * Math.pow(10, precision)) / Math.pow(10, precision);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–∑–∏—Ü–∏–µ–π
    getPositionManagementAdvice(position, currentPrice, marketData) {
        const advice = {
            action: 'HOLD',
            reasons: [],
            tpLevels: [],
            slLevel: null,
            riskLevel: 'LOW'
        };

        const pnlPercent = ((currentPrice - position.entryPrice) / position.entryPrice) * 100;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ TP
        advice.tpLevels = this.calculateTPLevels(position.entryPrice, position.side);
        advice.slLevel = this.calculateStopLoss(position.entryPrice, position.side);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if (pnlPercent <= -2) {
            advice.riskLevel = 'HIGH';
            advice.reasons.push(`–£–±—ã—Ç–æ–∫ ${pnlPercent.toFixed(2)}%`);
        } else if (pnlPercent <= -1) {
            advice.riskLevel = 'MEDIUM';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ TP —É—Ä–æ–≤–Ω–µ–π
        advice.tpLevels.forEach(tp => {
            const reached = position.side === 'long' ? 
                currentPrice >= tp.price : 
                currentPrice <= tp.price;
                
            if (reached) {
                advice.action = 'PARTIAL_CLOSE';
                advice.reasons.push(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç TP${tp.level} —É—Ä–æ–≤–µ–Ω—å`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SL
        const slTriggered = position.side === 'long' ? 
            currentPrice <= advice.slLevel : 
            currentPrice >= advice.slLevel;
            
        if (slTriggered) {
            advice.action = 'CLOSE';
            advice.riskLevel = 'CRITICAL';
            advice.reasons.push('–°—Ä–∞–±–æ—Ç–∞–ª Stop Loss');
        }

        return advice;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∏—Å–∫–∞–º
    async getRiskReport(activePositions) {
        const balance = await this.api.getBalance();
        const baseBalance = await this.getBaseBalance(balance);
        
        this.resetDailyStats();
        if (this.dailyStats.startBalance === 0) {
            this.dailyStats.startBalance = baseBalance;
        }

        const report = {
            balance: {
                current: baseBalance,
                start: this.dailyStats.startBalance,
                change: baseBalance - this.dailyStats.startBalance,
                changePercent: ((baseBalance - this.dailyStats.startBalance) / this.dailyStats.startBalance) * 100
            },
            positions: {
                count: activePositions.size,
                maxAllowed: this.maxOpenPositions,
                utilizationPercent: (activePositions.size / this.maxOpenPositions) * 100
            },
            dailyLimits: {
                maxLossPercent: this.maxDailyLoss,
                currentLossPercent: ((this.dailyStats.startBalance - baseBalance) / this.dailyStats.startBalance) * 100,
                tradesCount: this.dailyStats.tradesCount
            },
            recommendations: []
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (report.positions.utilizationPercent > 80) {
            report.recommendations.push('REDUCE_POSITIONS - –ú–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π');
        }
        
        if (report.dailyLimits.currentLossPercent > this.maxDailyLoss / 2) {
            report.recommendations.push('REDUCE_RISK - –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –¥–Ω–µ–≤–Ω—ã–º –ª–∏–º–∏—Ç–∞–º');
        }
        
        if (report.balance.changePercent < -5) {
            report.recommendations.push('REVIEW_STRATEGY - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏');
        }

        return report;
    }
}

module.exports = RiskManager;